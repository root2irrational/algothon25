
corr = 0.9
[[2, 20], [2, 6], [11, 23]]

corr = 0.85
[[2, 6], [2, 20], [11, 23], [22, 29], [29, 42], [31, 9], [33, 1]]

corr = 0.8
[[2, 6], [2, 20], [7, 13], [11, 13], [11, 23], [22, 29], [29, 42], [31, 9], [31, 14], [33, 1], [33, 6], [48, 49]]

corr = 0.25
[[0, 40], [2, 6], [2, 20], [6, 18], [7, 13], [8, 0], [8, 19], [8, 25], [8, 35], 
   [8, 37], [8, 40], [8, 47], [11, 13], [11, 23], [15, 18], [18, 2], [18, 4], [18, 16], 
   [18, 20], [18, 30], [18, 38], [18, 43], [22, 29], [25, 20], [25, 35], [26, 28], [26, 42], 
   [26, 45], [26, 48], [29, 42], [31, 9], [31, 14], [33, 1], [33, 2], [33, 4], [33, 6], [33, 16], 
   [33, 19], [33, 20], [33, 30], [33, 35], [33, 47], [37, 0], [37, 19], [37, 25], [48, 11], [48, 12], 
   [48, 17], [48, 23], [48, 24], [48, 29], [48, 34], [48, 39], [48, 42], [48, 49]]

# pairs = np.array([[2,6]])
# pairs = np.array([[2, 6], [8, 0], [11, 23], [18, 4], [18, 16], [18, 30], [33, 2], [33, 4], [33, 16], [33, 19], 
#                   [33, 20], [33, 30], [33, 35], [48, 26], [48, 49]]) # coint < 0.01

# pairs = np.array([[20, 33], [48, 49]]) # coint < 0.001
# corr = 0.75, coint < 0.1
# pairs = np.array(
#   [[2, 6], [2, 16], [2, 20], [2, 35], [6, 20], [7, 11], [7, 13], [9, 31], [11, 13], 
#   [11, 23], [11, 39], [14, 31], [19, 33], [19, 35], [22, 29], [25, 1], [25, 33], [25, 37], 
#   [29, 42], [31, 21], [31, 27], [33, 1], [33, 6], [35, 20], [43, 2], [48, 49]])
#corr = 0.75, coint < 0.2
# pairs = np.array(
#   [[1, 33], [2, 4], [2, 6], [2, 16], [2, 20], [2, 35], [4, 20], [6, 4], [6, 20], [6, 35], 
#    [7, 11], [7, 13], [9, 31], [11, 12], [11, 13], [11, 23], [11, 39], [14, 9], [14, 31], 
#    [16, 20], [16, 35], [19, 33], [19, 35], [20, 35], [21, 31], [22, 29], [25, 1], [25, 33], 
#    [25, 37], [27, 5], [27, 9], [27, 30], [27, 31], [29, 42], [33, 6], [35, 4], [43, 2], [47, 20], [48, 49]]
# )
# pairs = np.array([[2, 20], [2, 6], [11, 23]]) # corr = 0.9
pairs = np.array([[2, 6], [2, 20], [11, 23], [22, 29], [29, 42], [31, 9], [33, 1]]) # corr = 0.85
# pairs = np.array([[2, 6], [2, 20], [7, 13], [11, 13], [11, 23], [22, 29], [29, 42], [31, 9], [31, 14], [33, 1], [33, 6], [48, 49]]) # corr = 0.8
# -- below is for corr = 0.25, coint < 0.05
# pairs = np.array(
#   [[0, 40], [2, 6], [2, 20], [6, 18], [7, 13], [8, 0], [8, 19], [8, 25], [8, 35], 
#    [8, 37], [8, 40], [8, 47], [11, 13], [11, 23], [15, 18], [18, 2], [18, 4], [18, 16], 
#    [18, 20], [18, 30], [18, 38], [18, 43], [22, 29], [25, 20], [25, 35], [26, 28], [26, 42], 
#    [26, 45], [26, 48], [29, 42], [31, 9], [31, 14], [33, 1], [33, 2], [33, 4], [33, 6], [33, 16], 
#    [33, 19], [33, 20], [33, 30], [33, 35], [33, 47], [37, 0], [37, 19], [37, 25], [48, 11], [48, 12], 
#    [48, 17], [48, 23], [48, 24], [48, 29], [48, 34], [48, 39], [48, 42], [48, 49]]
# )

def convertForecastFromDiff(transformed_forecasts):
  boxcox_forecasts = []
  for idx in range(len(test)):
    if idx == 0:
      boxcox_forecast = transformed_forecasts[idx] + trainBoxcox[-1]
    else:
      boxcox_forecast = transformed_forecasts[idx] + boxcox_forecasts[idx-1]

    boxcox_forecasts.append(boxcox_forecast)

  forecasts = inv_boxcox(boxcox_forecasts, lambda_mle)
  return forecasts

def arModel(series, lags, test):
  selector = ar_select_order(series, lags)
  model = AutoReg(series, lags=selector.ar_lags).fit()
  against = test
  transformed_forecasts = list(model.forecast(steps=len(against)))
  pred = transformed_forecasts
  last_price = train[-1]
  pred = last_price * np.exp(np.cumsum(transformed_forecasts))
  return pred

# corr = 0.8, coint < 0.1
pairs = np.array(
  [[2, 6], [2, 16], [2, 20], [2, 35], [6, 20], [7, 11], [7, 13], [9, 31], [11, 13], 
  [11, 23], [11, 39], [14, 31], [22, 29], [25, 33], [29, 42], [31, 21], [31, 27], 
  [33, 1], [33, 6], [35, 20], [43, 2], [48, 49]])

# corr = 0.8, coint < 0.1
negPairs = np.array(
  [[1, 49], [2, 22], [2, 29], [6, 22], [6, 29], [16, 22], [16, 29], [20, 22], [22, 2], 
   [22, 4], [22, 6], [22, 16], [22, 20], [22, 35], [25, 49], [29, 2], [29, 6], [29, 16], 
   [33, 49], [35, 22], [49, 1], [49, 25], [49, 33]]
)